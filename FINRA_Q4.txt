Q4. 
Premise:
Adam is so good at playing arcade games that he will win at every game he plays. One fine day as he was walking on the street, he discovers an arcade store that pays real cash for every game that the player wins - however, the store will only pay out once per game. The store has 10 games for which they will pay winners, and each game has its own completion time and payout rate. Thrilled at the prospect of earning money for his talent, Adam walked into the store only to realize that the store closes in 2 hours (exactly 120 minutes). Knowing that he cannot play all the games in that time, he decides to pick the games that maximize his earnings
GAME	COMPLETION_TIME (in minutes)	PAYOUT_RATE
Pac-man	75	$250
Speed Racer	45	$280
Pump it Up	30	$150
Space Invaders	35	$120
Mario Bros	30	$200
Mortal Kombat	15	$100
Atari Breakout	60	$300
Super Tetris	90	$350
Star Wars	20	$110
Street Fighter II	10	$90

Question:
Write code (or pseudocode) in your favorite programming language to help Adam pick the sequence(s) of games that earn him the most money?.

Then, assume you have a variable list of games and their payout rates. What is the best way to pick the games that earn you the most?

An acceptable solution is a workable solution that accounts for all the different scenarios in a variable list of games with their completion times and payout rates.

Notes:


from collections import defaultdict
import itertools as it

source = [75,45,30,35,30,15,60,90,20,10]
targets = [120]

p = [[a for n in range(1, len(source)) for a in it.combinations(source, n) if sum(a) == t] for t in targets]
[dict(zip(targets, a)) for a in it.product(*p) if len(sum(a, tuple())) == len(set(sum(a, tuple())))]

print(p)


Pac-man			75	$250
Speed Racer		45	$280
Pump it Up		30	$150
Space Invaders		35	$120
Mario Bros		30	$200
Mortal Kombat		15	$100
Atari Breakout		60	$300
Super Tetris		90	$350
Star Wars		20	$110
Street Fighter II	10	$90



[[(75, 45), 		250+280			530
(30, 90),  		200+350			550
(30, 90), 		
(75, 30, 15), 		250+200+100		550
(75, 35, 10), 		250+120+90		460
(75, 30, 15), 		250+150+100		500		
(45, 15, 60), 		280+100+300		680
(30, 30, 60), 		150+200+300		650
(90, 20, 10),  		350+110+90		550
(75, 15, 20, 10), 	250+100+110+90		550
(45, 30, 35, 10), 	280+150+120+90		640
(45, 30, 30, 15), 	280+200+150+100		730
(45, 35, 30, 10), 	280+120+200+90		690
(30, 60, 20, 10), 	150+300+110+90		650
(35, 15, 60, 10), 	120+300+110+90		620
(30, 60, 20, 10), 	200+300+110+90		700
(45, 30, 15, 20, 10), `280+ 200+100+110+90	780
(45, 30, 15, 20, 10),  280+150+100+110+90	680
(30, 35, 30, 15, 10)]] 200+120+150+100+90	670


Psuedocode :
   1) Get timing combination to 120 mins. 
   2) Sum the values for each combination 
   3) Iterate the each combination and check for max value , which is maximum payout.
	Games selected : Speed Racer,Mario Bros, Mortal Kombat , Star Wars,Street Fighter II
 	 (45, 30, 15, 20, 10), `280+ 200+100+110+90 =780
   